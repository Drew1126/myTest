1
#include <iostream>
#include <stack>
#include <queue>
#include <map>
using namespace std;
map<char, int> priority = { {'*', 1}, {'/',1}, {'+', 0}, {'-', 0} };
void suffix(string str) {
	stack<char> OperaStack;
	queue<string> ret;
	for (auto it = str.begin(); it != str.end(); it++)
	{
		if (isdigit(*it))
		{
			string num = string("") + *it;
			while (it + 1 != str.end() && isdigit(*(it + 1))) {
				it++;
				num += string("") + *it;
			}
			ret.push(num);
		}
		else
		{
			if (OperaStack.empty() || priority[*it] > priority[OperaStack.top()] || *it == '(')
				OperaStack.push(*it);
			else if (*it == ')') {
				while (OperaStack.top() != '(')
				{
					ret.push(string("") + OperaStack.top());
					OperaStack.pop();
				}
				OperaStack.pop();
			}
			else {
				while (!OperaStack.empty() && priority[*it] <= priority[OperaStack.top()] && OperaStack.top() != '(') {
					ret.push(string("") + OperaStack.top());
					OperaStack.pop();
				}
				OperaStack.push(*it);
			}
				
		}
	}
	while (!OperaStack.empty())
	{
		ret.push(string("") + OperaStack.top());
		OperaStack.pop();
	}
	while (!ret.empty()) {
		cout << ret.front();
		ret.pop();
		if (!ret.empty())
			cout << " ";
	}
}
void prefix(string str) {
	stack<char> OperaStack;
	stack<string> ret;
	for (auto it = str.rbegin(); it != str.rend(); it++)
	{
		if (isdigit(*it))
		{
			string num = string("") + *it;
			while (it + 1 != str.rend() && isdigit(*(it + 1))) {
				it++;
				num = *it + string("") + num;
			}
			ret.push(num);
		}
		else
		{
			if (OperaStack.empty() || priority[*it] > priority[OperaStack.top()] || *it == ')')
				OperaStack.push(*it);
			else if (*it == '(') {
				while (OperaStack.top() != ')')
				{
					ret.push(string("") + OperaStack.top());
					OperaStack.pop();
				}
				OperaStack.pop();
			}
			else {
				while (!OperaStack.empty() && priority[*it] < priority[OperaStack.top()] && OperaStack.top() != ')') {
					ret.push(string("") + OperaStack.top());
					OperaStack.pop();
				}
				OperaStack.push(*it);
			}
		}

	}
	while (!OperaStack.empty())
	{
		ret.push(string("") + OperaStack.top());
		OperaStack.pop();
	}
	while (!ret.empty()) {
		cout << ret.top();
		ret.pop();
		if (!ret.empty())
			cout << " ";
	}

}
int main(){
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		string str;
		cin >> str;
		prefix(str);
		cout << endl;
		suffix(str);
		if (i + 1 != t)
			cout << endl << endl;
	}
}